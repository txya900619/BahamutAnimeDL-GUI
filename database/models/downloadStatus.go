// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DownloadStatus is an object representing the database table.
type DownloadStatus struct {
	ID      null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	SN      int64      `boil:"sn" json:"sn" toml:"sn" yaml:"sn"`
	Part    int64      `boil:"part" json:"part" toml:"part" yaml:"part"`
	Success int64      `boil:"success" json:"success" toml:"success" yaml:"success"`

	R *downloadStatusR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L downloadStatusL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DownloadStatusColumns = struct {
	ID      string
	SN      string
	Part    string
	Success string
}{
	ID:      "id",
	SN:      "sn",
	Part:    "part",
	Success: "success",
}

// Generated where

var DownloadStatusWhere = struct {
	ID      whereHelpernull_Int64
	SN      whereHelperint64
	Part    whereHelperint64
	Success whereHelperint64
}{
	ID:      whereHelpernull_Int64{field: "\"downloadStatus\".\"id\""},
	SN:      whereHelperint64{field: "\"downloadStatus\".\"sn\""},
	Part:    whereHelperint64{field: "\"downloadStatus\".\"part\""},
	Success: whereHelperint64{field: "\"downloadStatus\".\"success\""},
}

// DownloadStatusRels is where relationship names are stored.
var DownloadStatusRels = struct {
}{}

// downloadStatusR is where relationships are stored.
type downloadStatusR struct {
}

// NewStruct creates a new relationship struct
func (*downloadStatusR) NewStruct() *downloadStatusR {
	return &downloadStatusR{}
}

// downloadStatusL is where Load methods for each relationship are stored.
type downloadStatusL struct{}

var (
	downloadStatusAllColumns            = []string{"id", "sn", "part", "success"}
	downloadStatusColumnsWithoutDefault = []string{}
	downloadStatusColumnsWithDefault    = []string{"id", "sn", "part", "success"}
	downloadStatusPrimaryKeyColumns     = []string{"id"}
)

type (
	// DownloadStatusSlice is an alias for a slice of pointers to DownloadStatus.
	// This should generally be used opposed to []DownloadStatus.
	DownloadStatusSlice []*DownloadStatus
	// DownloadStatusHook is the signature for custom DownloadStatus hook methods
	DownloadStatusHook func(context.Context, boil.ContextExecutor, *DownloadStatus) error

	downloadStatusQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	downloadStatusType                 = reflect.TypeOf(&DownloadStatus{})
	downloadStatusMapping              = queries.MakeStructMapping(downloadStatusType)
	downloadStatusPrimaryKeyMapping, _ = queries.BindMapping(downloadStatusType, downloadStatusMapping, downloadStatusPrimaryKeyColumns)
	downloadStatusInsertCacheMut       sync.RWMutex
	downloadStatusInsertCache          = make(map[string]insertCache)
	downloadStatusUpdateCacheMut       sync.RWMutex
	downloadStatusUpdateCache          = make(map[string]updateCache)
	downloadStatusUpsertCacheMut       sync.RWMutex
	downloadStatusUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var downloadStatusBeforeInsertHooks []DownloadStatusHook
var downloadStatusBeforeUpdateHooks []DownloadStatusHook
var downloadStatusBeforeDeleteHooks []DownloadStatusHook
var downloadStatusBeforeUpsertHooks []DownloadStatusHook

var downloadStatusAfterInsertHooks []DownloadStatusHook
var downloadStatusAfterSelectHooks []DownloadStatusHook
var downloadStatusAfterUpdateHooks []DownloadStatusHook
var downloadStatusAfterDeleteHooks []DownloadStatusHook
var downloadStatusAfterUpsertHooks []DownloadStatusHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DownloadStatus) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadStatusBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DownloadStatus) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadStatusBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DownloadStatus) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadStatusBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DownloadStatus) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadStatusBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DownloadStatus) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadStatusAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DownloadStatus) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadStatusAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DownloadStatus) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadStatusAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DownloadStatus) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadStatusAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DownloadStatus) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadStatusAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDownloadStatusHook registers your hook function for all future operations.
func AddDownloadStatusHook(hookPoint boil.HookPoint, downloadStatusHook DownloadStatusHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		downloadStatusBeforeInsertHooks = append(downloadStatusBeforeInsertHooks, downloadStatusHook)
	case boil.BeforeUpdateHook:
		downloadStatusBeforeUpdateHooks = append(downloadStatusBeforeUpdateHooks, downloadStatusHook)
	case boil.BeforeDeleteHook:
		downloadStatusBeforeDeleteHooks = append(downloadStatusBeforeDeleteHooks, downloadStatusHook)
	case boil.BeforeUpsertHook:
		downloadStatusBeforeUpsertHooks = append(downloadStatusBeforeUpsertHooks, downloadStatusHook)
	case boil.AfterInsertHook:
		downloadStatusAfterInsertHooks = append(downloadStatusAfterInsertHooks, downloadStatusHook)
	case boil.AfterSelectHook:
		downloadStatusAfterSelectHooks = append(downloadStatusAfterSelectHooks, downloadStatusHook)
	case boil.AfterUpdateHook:
		downloadStatusAfterUpdateHooks = append(downloadStatusAfterUpdateHooks, downloadStatusHook)
	case boil.AfterDeleteHook:
		downloadStatusAfterDeleteHooks = append(downloadStatusAfterDeleteHooks, downloadStatusHook)
	case boil.AfterUpsertHook:
		downloadStatusAfterUpsertHooks = append(downloadStatusAfterUpsertHooks, downloadStatusHook)
	}
}

// One returns a single downloadStatus record from the query.
func (q downloadStatusQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DownloadStatus, error) {
	o := &DownloadStatus{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for downloadStatus")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DownloadStatus records from the query.
func (q downloadStatusQuery) All(ctx context.Context, exec boil.ContextExecutor) (DownloadStatusSlice, error) {
	var o []*DownloadStatus

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DownloadStatus slice")
	}

	if len(downloadStatusAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DownloadStatus records in the query.
func (q downloadStatusQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count downloadStatus rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q downloadStatusQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if downloadStatus exists")
	}

	return count > 0, nil
}

// DownloadStatus retrieves all the records using an executor.
func DownloadStatus(mods ...qm.QueryMod) downloadStatusQuery {
	mods = append(mods, qm.From("\"downloadStatus\""))
	return downloadStatusQuery{NewQuery(mods...)}
}

// FindDownloadStatus retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDownloadStatus(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*DownloadStatus, error) {
	downloadStatusObj := &DownloadStatus{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"downloadStatus\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, downloadStatusObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from downloadStatus")
	}

	return downloadStatusObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DownloadStatus) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no downloadStatus provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(downloadStatusColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	downloadStatusInsertCacheMut.RLock()
	cache, cached := downloadStatusInsertCache[key]
	downloadStatusInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			downloadStatusAllColumns,
			downloadStatusColumnsWithDefault,
			downloadStatusColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(downloadStatusType, downloadStatusMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(downloadStatusType, downloadStatusMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"downloadStatus\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"downloadStatus\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"downloadStatus\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, downloadStatusPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into downloadStatus")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for downloadStatus")
	}

CacheNoHooks:
	if !cached {
		downloadStatusInsertCacheMut.Lock()
		downloadStatusInsertCache[key] = cache
		downloadStatusInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DownloadStatus.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DownloadStatus) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	downloadStatusUpdateCacheMut.RLock()
	cache, cached := downloadStatusUpdateCache[key]
	downloadStatusUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			downloadStatusAllColumns,
			downloadStatusPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update downloadStatus, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"downloadStatus\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, downloadStatusPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(downloadStatusType, downloadStatusMapping, append(wl, downloadStatusPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update downloadStatus row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for downloadStatus")
	}

	if !cached {
		downloadStatusUpdateCacheMut.Lock()
		downloadStatusUpdateCache[key] = cache
		downloadStatusUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q downloadStatusQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for downloadStatus")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for downloadStatus")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DownloadStatusSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), downloadStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"downloadStatus\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, downloadStatusPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in downloadStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all downloadStatus")
	}
	return rowsAff, nil
}

// Delete deletes a single DownloadStatus record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DownloadStatus) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DownloadStatus provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), downloadStatusPrimaryKeyMapping)
	sql := "DELETE FROM \"downloadStatus\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from downloadStatus")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for downloadStatus")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q downloadStatusQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no downloadStatusQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from downloadStatus")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for downloadStatus")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DownloadStatusSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(downloadStatusBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), downloadStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"downloadStatus\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, downloadStatusPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from downloadStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for downloadStatus")
	}

	if len(downloadStatusAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DownloadStatus) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDownloadStatus(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DownloadStatusSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DownloadStatusSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), downloadStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"downloadStatus\".* FROM \"downloadStatus\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, downloadStatusPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DownloadStatusSlice")
	}

	*o = slice

	return nil
}

// DownloadStatusExists checks if the DownloadStatus row exists.
func DownloadStatusExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"downloadStatus\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if downloadStatus exists")
	}

	return exists, nil
}
