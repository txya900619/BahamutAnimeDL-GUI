// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DownloadQueue is an object representing the database table.
type DownloadQueue struct {
	SN          int64  `boil:"sn" json:"sn" toml:"sn" yaml:"sn"`
	Name        string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Ep          string `boil:"ep" json:"ep" toml:"ep" yaml:"ep"`
	Sequence    int64  `boil:"sequence" json:"sequence" toml:"sequence" yaml:"sequence"`
	Downloading int64  `boil:"downloading" json:"downloading" toml:"downloading" yaml:"downloading"`
	Stop        int64  `boil:"stop" json:"stop" toml:"stop" yaml:"stop"`
	Spacial     int64  `boil:"spacial" json:"spacial" toml:"spacial" yaml:"spacial"`

	R *downloadQueueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L downloadQueueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DownloadQueueColumns = struct {
	SN          string
	Name        string
	Ep          string
	Sequence    string
	Downloading string
	Stop        string
	Spacial     string
}{
	SN:          "sn",
	Name:        "name",
	Ep:          "ep",
	Sequence:    "sequence",
	Downloading: "downloading",
	Stop:        "stop",
	Spacial:     "spacial",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var DownloadQueueWhere = struct {
	SN          whereHelperint64
	Name        whereHelperstring
	Ep          whereHelperstring
	Sequence    whereHelperint64
	Downloading whereHelperint64
	Stop        whereHelperint64
	Spacial     whereHelperint64
}{
	SN:          whereHelperint64{field: "\"downloadQueue\".\"sn\""},
	Name:        whereHelperstring{field: "\"downloadQueue\".\"name\""},
	Ep:          whereHelperstring{field: "\"downloadQueue\".\"ep\""},
	Sequence:    whereHelperint64{field: "\"downloadQueue\".\"sequence\""},
	Downloading: whereHelperint64{field: "\"downloadQueue\".\"downloading\""},
	Stop:        whereHelperint64{field: "\"downloadQueue\".\"stop\""},
	Spacial:     whereHelperint64{field: "\"downloadQueue\".\"spacial\""},
}

// DownloadQueueRels is where relationship names are stored.
var DownloadQueueRels = struct {
}{}

// downloadQueueR is where relationships are stored.
type downloadQueueR struct {
}

// NewStruct creates a new relationship struct
func (*downloadQueueR) NewStruct() *downloadQueueR {
	return &downloadQueueR{}
}

// downloadQueueL is where Load methods for each relationship are stored.
type downloadQueueL struct{}

var (
	downloadQueueAllColumns            = []string{"sn", "name", "ep", "sequence", "downloading", "stop", "spacial"}
	downloadQueueColumnsWithoutDefault = []string{"name", "ep", "sequence"}
	downloadQueueColumnsWithDefault    = []string{"sn", "downloading", "stop", "spacial"}
	downloadQueuePrimaryKeyColumns     = []string{"sn"}
)

type (
	// DownloadQueueSlice is an alias for a slice of pointers to DownloadQueue.
	// This should generally be used opposed to []DownloadQueue.
	DownloadQueueSlice []*DownloadQueue
	// DownloadQueueHook is the signature for custom DownloadQueue hook methods
	DownloadQueueHook func(context.Context, boil.ContextExecutor, *DownloadQueue) error

	downloadQueueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	downloadQueueType                 = reflect.TypeOf(&DownloadQueue{})
	downloadQueueMapping              = queries.MakeStructMapping(downloadQueueType)
	downloadQueuePrimaryKeyMapping, _ = queries.BindMapping(downloadQueueType, downloadQueueMapping, downloadQueuePrimaryKeyColumns)
	downloadQueueInsertCacheMut       sync.RWMutex
	downloadQueueInsertCache          = make(map[string]insertCache)
	downloadQueueUpdateCacheMut       sync.RWMutex
	downloadQueueUpdateCache          = make(map[string]updateCache)
	downloadQueueUpsertCacheMut       sync.RWMutex
	downloadQueueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var downloadQueueBeforeInsertHooks []DownloadQueueHook
var downloadQueueBeforeUpdateHooks []DownloadQueueHook
var downloadQueueBeforeDeleteHooks []DownloadQueueHook
var downloadQueueBeforeUpsertHooks []DownloadQueueHook

var downloadQueueAfterInsertHooks []DownloadQueueHook
var downloadQueueAfterSelectHooks []DownloadQueueHook
var downloadQueueAfterUpdateHooks []DownloadQueueHook
var downloadQueueAfterDeleteHooks []DownloadQueueHook
var downloadQueueAfterUpsertHooks []DownloadQueueHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DownloadQueue) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadQueueBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DownloadQueue) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadQueueBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DownloadQueue) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadQueueBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DownloadQueue) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadQueueBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DownloadQueue) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadQueueAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DownloadQueue) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadQueueAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DownloadQueue) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadQueueAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DownloadQueue) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadQueueAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DownloadQueue) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadQueueAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDownloadQueueHook registers your hook function for all future operations.
func AddDownloadQueueHook(hookPoint boil.HookPoint, downloadQueueHook DownloadQueueHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		downloadQueueBeforeInsertHooks = append(downloadQueueBeforeInsertHooks, downloadQueueHook)
	case boil.BeforeUpdateHook:
		downloadQueueBeforeUpdateHooks = append(downloadQueueBeforeUpdateHooks, downloadQueueHook)
	case boil.BeforeDeleteHook:
		downloadQueueBeforeDeleteHooks = append(downloadQueueBeforeDeleteHooks, downloadQueueHook)
	case boil.BeforeUpsertHook:
		downloadQueueBeforeUpsertHooks = append(downloadQueueBeforeUpsertHooks, downloadQueueHook)
	case boil.AfterInsertHook:
		downloadQueueAfterInsertHooks = append(downloadQueueAfterInsertHooks, downloadQueueHook)
	case boil.AfterSelectHook:
		downloadQueueAfterSelectHooks = append(downloadQueueAfterSelectHooks, downloadQueueHook)
	case boil.AfterUpdateHook:
		downloadQueueAfterUpdateHooks = append(downloadQueueAfterUpdateHooks, downloadQueueHook)
	case boil.AfterDeleteHook:
		downloadQueueAfterDeleteHooks = append(downloadQueueAfterDeleteHooks, downloadQueueHook)
	case boil.AfterUpsertHook:
		downloadQueueAfterUpsertHooks = append(downloadQueueAfterUpsertHooks, downloadQueueHook)
	}
}

// One returns a single downloadQueue record from the query.
func (q downloadQueueQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DownloadQueue, error) {
	o := &DownloadQueue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for downloadQueue")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DownloadQueue records from the query.
func (q downloadQueueQuery) All(ctx context.Context, exec boil.ContextExecutor) (DownloadQueueSlice, error) {
	var o []*DownloadQueue

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DownloadQueue slice")
	}

	if len(downloadQueueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DownloadQueue records in the query.
func (q downloadQueueQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count downloadQueue rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q downloadQueueQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if downloadQueue exists")
	}

	return count > 0, nil
}

// DownloadQueues retrieves all the records using an executor.
func DownloadQueues(mods ...qm.QueryMod) downloadQueueQuery {
	mods = append(mods, qm.From("\"downloadQueue\""))
	return downloadQueueQuery{NewQuery(mods...)}
}

// FindDownloadQueue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDownloadQueue(ctx context.Context, exec boil.ContextExecutor, sN int64, selectCols ...string) (*DownloadQueue, error) {
	downloadQueueObj := &DownloadQueue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"downloadQueue\" where \"sn\"=?", sel,
	)

	q := queries.Raw(query, sN)

	err := q.Bind(ctx, exec, downloadQueueObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from downloadQueue")
	}

	return downloadQueueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DownloadQueue) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no downloadQueue provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(downloadQueueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	downloadQueueInsertCacheMut.RLock()
	cache, cached := downloadQueueInsertCache[key]
	downloadQueueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			downloadQueueAllColumns,
			downloadQueueColumnsWithDefault,
			downloadQueueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(downloadQueueType, downloadQueueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(downloadQueueType, downloadQueueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"downloadQueue\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"downloadQueue\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"downloadQueue\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, downloadQueuePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into downloadQueue")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.SN = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == downloadQueueMapping["sn"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SN,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for downloadQueue")
	}

CacheNoHooks:
	if !cached {
		downloadQueueInsertCacheMut.Lock()
		downloadQueueInsertCache[key] = cache
		downloadQueueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DownloadQueue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DownloadQueue) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	downloadQueueUpdateCacheMut.RLock()
	cache, cached := downloadQueueUpdateCache[key]
	downloadQueueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			downloadQueueAllColumns,
			downloadQueuePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update downloadQueue, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"downloadQueue\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, downloadQueuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(downloadQueueType, downloadQueueMapping, append(wl, downloadQueuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update downloadQueue row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for downloadQueue")
	}

	if !cached {
		downloadQueueUpdateCacheMut.Lock()
		downloadQueueUpdateCache[key] = cache
		downloadQueueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q downloadQueueQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for downloadQueue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for downloadQueue")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DownloadQueueSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), downloadQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"downloadQueue\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, downloadQueuePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in downloadQueue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all downloadQueue")
	}
	return rowsAff, nil
}

// Delete deletes a single DownloadQueue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DownloadQueue) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DownloadQueue provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), downloadQueuePrimaryKeyMapping)
	sql := "DELETE FROM \"downloadQueue\" WHERE \"sn\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from downloadQueue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for downloadQueue")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q downloadQueueQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no downloadQueueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from downloadQueue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for downloadQueue")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DownloadQueueSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(downloadQueueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), downloadQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"downloadQueue\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, downloadQueuePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from downloadQueue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for downloadQueue")
	}

	if len(downloadQueueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DownloadQueue) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDownloadQueue(ctx, exec, o.SN)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DownloadQueueSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DownloadQueueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), downloadQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"downloadQueue\".* FROM \"downloadQueue\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, downloadQueuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DownloadQueueSlice")
	}

	*o = slice

	return nil
}

// DownloadQueueExists checks if the DownloadQueue row exists.
func DownloadQueueExists(ctx context.Context, exec boil.ContextExecutor, sN int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"downloadQueue\" where \"sn\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, sN)
	}
	row := exec.QueryRowContext(ctx, sql, sN)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if downloadQueue exists")
	}

	return exists, nil
}
