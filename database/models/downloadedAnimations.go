// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DownloadedAnimation is an object representing the database table.
type DownloadedAnimation struct {
	SN      int64  `boil:"sn" json:"sn" toml:"sn" yaml:"sn"`
	Title   string `boil:"title" json:"title" toml:"title" yaml:"title"`
	Episode string `boil:"episode" json:"episode" toml:"episode" yaml:"episode"`
	Spacial int64  `boil:"spacial" json:"spacial" toml:"spacial" yaml:"spacial"`

	R *downloadedAnimationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L downloadedAnimationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DownloadedAnimationColumns = struct {
	SN      string
	Title   string
	Episode string
	Spacial string
}{
	SN:      "sn",
	Title:   "title",
	Episode: "episode",
	Spacial: "spacial",
}

// Generated where

var DownloadedAnimationWhere = struct {
	SN      whereHelperint64
	Title   whereHelperstring
	Episode whereHelperstring
	Spacial whereHelperint64
}{
	SN:      whereHelperint64{field: "\"downloadedAnimations\".\"sn\""},
	Title:   whereHelperstring{field: "\"downloadedAnimations\".\"title\""},
	Episode: whereHelperstring{field: "\"downloadedAnimations\".\"episode\""},
	Spacial: whereHelperint64{field: "\"downloadedAnimations\".\"spacial\""},
}

// DownloadedAnimationRels is where relationship names are stored.
var DownloadedAnimationRels = struct {
}{}

// downloadedAnimationR is where relationships are stored.
type downloadedAnimationR struct {
}

// NewStruct creates a new relationship struct
func (*downloadedAnimationR) NewStruct() *downloadedAnimationR {
	return &downloadedAnimationR{}
}

// downloadedAnimationL is where Load methods for each relationship are stored.
type downloadedAnimationL struct{}

var (
	downloadedAnimationAllColumns            = []string{"sn", "title", "episode", "spacial"}
	downloadedAnimationColumnsWithoutDefault = []string{"title", "episode"}
	downloadedAnimationColumnsWithDefault    = []string{"sn", "spacial"}
	downloadedAnimationPrimaryKeyColumns     = []string{"sn"}
)

type (
	// DownloadedAnimationSlice is an alias for a slice of pointers to DownloadedAnimation.
	// This should generally be used opposed to []DownloadedAnimation.
	DownloadedAnimationSlice []*DownloadedAnimation
	// DownloadedAnimationHook is the signature for custom DownloadedAnimation hook methods
	DownloadedAnimationHook func(context.Context, boil.ContextExecutor, *DownloadedAnimation) error

	downloadedAnimationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	downloadedAnimationType                 = reflect.TypeOf(&DownloadedAnimation{})
	downloadedAnimationMapping              = queries.MakeStructMapping(downloadedAnimationType)
	downloadedAnimationPrimaryKeyMapping, _ = queries.BindMapping(downloadedAnimationType, downloadedAnimationMapping, downloadedAnimationPrimaryKeyColumns)
	downloadedAnimationInsertCacheMut       sync.RWMutex
	downloadedAnimationInsertCache          = make(map[string]insertCache)
	downloadedAnimationUpdateCacheMut       sync.RWMutex
	downloadedAnimationUpdateCache          = make(map[string]updateCache)
	downloadedAnimationUpsertCacheMut       sync.RWMutex
	downloadedAnimationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var downloadedAnimationBeforeInsertHooks []DownloadedAnimationHook
var downloadedAnimationBeforeUpdateHooks []DownloadedAnimationHook
var downloadedAnimationBeforeDeleteHooks []DownloadedAnimationHook
var downloadedAnimationBeforeUpsertHooks []DownloadedAnimationHook

var downloadedAnimationAfterInsertHooks []DownloadedAnimationHook
var downloadedAnimationAfterSelectHooks []DownloadedAnimationHook
var downloadedAnimationAfterUpdateHooks []DownloadedAnimationHook
var downloadedAnimationAfterDeleteHooks []DownloadedAnimationHook
var downloadedAnimationAfterUpsertHooks []DownloadedAnimationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DownloadedAnimation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadedAnimationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DownloadedAnimation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadedAnimationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DownloadedAnimation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadedAnimationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DownloadedAnimation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadedAnimationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DownloadedAnimation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadedAnimationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DownloadedAnimation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadedAnimationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DownloadedAnimation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadedAnimationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DownloadedAnimation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadedAnimationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DownloadedAnimation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadedAnimationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDownloadedAnimationHook registers your hook function for all future operations.
func AddDownloadedAnimationHook(hookPoint boil.HookPoint, downloadedAnimationHook DownloadedAnimationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		downloadedAnimationBeforeInsertHooks = append(downloadedAnimationBeforeInsertHooks, downloadedAnimationHook)
	case boil.BeforeUpdateHook:
		downloadedAnimationBeforeUpdateHooks = append(downloadedAnimationBeforeUpdateHooks, downloadedAnimationHook)
	case boil.BeforeDeleteHook:
		downloadedAnimationBeforeDeleteHooks = append(downloadedAnimationBeforeDeleteHooks, downloadedAnimationHook)
	case boil.BeforeUpsertHook:
		downloadedAnimationBeforeUpsertHooks = append(downloadedAnimationBeforeUpsertHooks, downloadedAnimationHook)
	case boil.AfterInsertHook:
		downloadedAnimationAfterInsertHooks = append(downloadedAnimationAfterInsertHooks, downloadedAnimationHook)
	case boil.AfterSelectHook:
		downloadedAnimationAfterSelectHooks = append(downloadedAnimationAfterSelectHooks, downloadedAnimationHook)
	case boil.AfterUpdateHook:
		downloadedAnimationAfterUpdateHooks = append(downloadedAnimationAfterUpdateHooks, downloadedAnimationHook)
	case boil.AfterDeleteHook:
		downloadedAnimationAfterDeleteHooks = append(downloadedAnimationAfterDeleteHooks, downloadedAnimationHook)
	case boil.AfterUpsertHook:
		downloadedAnimationAfterUpsertHooks = append(downloadedAnimationAfterUpsertHooks, downloadedAnimationHook)
	}
}

// One returns a single downloadedAnimation record from the query.
func (q downloadedAnimationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DownloadedAnimation, error) {
	o := &DownloadedAnimation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for downloadedAnimations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DownloadedAnimation records from the query.
func (q downloadedAnimationQuery) All(ctx context.Context, exec boil.ContextExecutor) (DownloadedAnimationSlice, error) {
	var o []*DownloadedAnimation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DownloadedAnimation slice")
	}

	if len(downloadedAnimationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DownloadedAnimation records in the query.
func (q downloadedAnimationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count downloadedAnimations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q downloadedAnimationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if downloadedAnimations exists")
	}

	return count > 0, nil
}

// DownloadedAnimations retrieves all the records using an executor.
func DownloadedAnimations(mods ...qm.QueryMod) downloadedAnimationQuery {
	mods = append(mods, qm.From("\"downloadedAnimations\""))
	return downloadedAnimationQuery{NewQuery(mods...)}
}

// FindDownloadedAnimation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDownloadedAnimation(ctx context.Context, exec boil.ContextExecutor, sN int64, selectCols ...string) (*DownloadedAnimation, error) {
	downloadedAnimationObj := &DownloadedAnimation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"downloadedAnimations\" where \"sn\"=?", sel,
	)

	q := queries.Raw(query, sN)

	err := q.Bind(ctx, exec, downloadedAnimationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from downloadedAnimations")
	}

	return downloadedAnimationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DownloadedAnimation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no downloadedAnimations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(downloadedAnimationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	downloadedAnimationInsertCacheMut.RLock()
	cache, cached := downloadedAnimationInsertCache[key]
	downloadedAnimationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			downloadedAnimationAllColumns,
			downloadedAnimationColumnsWithDefault,
			downloadedAnimationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(downloadedAnimationType, downloadedAnimationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(downloadedAnimationType, downloadedAnimationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"downloadedAnimations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"downloadedAnimations\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"downloadedAnimations\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, downloadedAnimationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into downloadedAnimations")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.SN = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == downloadedAnimationMapping["sn"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SN,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for downloadedAnimations")
	}

CacheNoHooks:
	if !cached {
		downloadedAnimationInsertCacheMut.Lock()
		downloadedAnimationInsertCache[key] = cache
		downloadedAnimationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DownloadedAnimation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DownloadedAnimation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	downloadedAnimationUpdateCacheMut.RLock()
	cache, cached := downloadedAnimationUpdateCache[key]
	downloadedAnimationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			downloadedAnimationAllColumns,
			downloadedAnimationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update downloadedAnimations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"downloadedAnimations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, downloadedAnimationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(downloadedAnimationType, downloadedAnimationMapping, append(wl, downloadedAnimationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update downloadedAnimations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for downloadedAnimations")
	}

	if !cached {
		downloadedAnimationUpdateCacheMut.Lock()
		downloadedAnimationUpdateCache[key] = cache
		downloadedAnimationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q downloadedAnimationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for downloadedAnimations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for downloadedAnimations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DownloadedAnimationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), downloadedAnimationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"downloadedAnimations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, downloadedAnimationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in downloadedAnimation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all downloadedAnimation")
	}
	return rowsAff, nil
}

// Delete deletes a single DownloadedAnimation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DownloadedAnimation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DownloadedAnimation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), downloadedAnimationPrimaryKeyMapping)
	sql := "DELETE FROM \"downloadedAnimations\" WHERE \"sn\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from downloadedAnimations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for downloadedAnimations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q downloadedAnimationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no downloadedAnimationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from downloadedAnimations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for downloadedAnimations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DownloadedAnimationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(downloadedAnimationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), downloadedAnimationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"downloadedAnimations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, downloadedAnimationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from downloadedAnimation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for downloadedAnimations")
	}

	if len(downloadedAnimationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DownloadedAnimation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDownloadedAnimation(ctx, exec, o.SN)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DownloadedAnimationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DownloadedAnimationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), downloadedAnimationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"downloadedAnimations\".* FROM \"downloadedAnimations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, downloadedAnimationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DownloadedAnimationSlice")
	}

	*o = slice

	return nil
}

// DownloadedAnimationExists checks if the DownloadedAnimation row exists.
func DownloadedAnimationExists(ctx context.Context, exec boil.ContextExecutor, sN int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"downloadedAnimations\" where \"sn\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, sN)
	}
	row := exec.QueryRowContext(ctx, sql, sN)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if downloadedAnimations exists")
	}

	return exists, nil
}
