// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DownloadState is an object representing the database table.
type DownloadState struct {
	ID      null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	SN      int64      `boil:"sn" json:"sn" toml:"sn" yaml:"sn"`
	Part    string     `boil:"part" json:"part" toml:"part" yaml:"part"`
	Success int64      `boil:"success" json:"success" toml:"success" yaml:"success"`

	R *downloadStateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L downloadStateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DownloadStateColumns = struct {
	ID      string
	SN      string
	Part    string
	Success string
}{
	ID:      "id",
	SN:      "sn",
	Part:    "part",
	Success: "success",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DownloadStateWhere = struct {
	ID      whereHelpernull_Int64
	SN      whereHelperint64
	Part    whereHelperstring
	Success whereHelperint64
}{
	ID:      whereHelpernull_Int64{field: "\"downloadState\".\"id\""},
	SN:      whereHelperint64{field: "\"downloadState\".\"sn\""},
	Part:    whereHelperstring{field: "\"downloadState\".\"part\""},
	Success: whereHelperint64{field: "\"downloadState\".\"success\""},
}

// DownloadStateRels is where relationship names are stored.
var DownloadStateRels = struct {
}{}

// downloadStateR is where relationships are stored.
type downloadStateR struct {
}

// NewStruct creates a new relationship struct
func (*downloadStateR) NewStruct() *downloadStateR {
	return &downloadStateR{}
}

// downloadStateL is where Load methods for each relationship are stored.
type downloadStateL struct{}

var (
	downloadStateAllColumns            = []string{"id", "sn", "part", "success"}
	downloadStateColumnsWithoutDefault = []string{}
	downloadStateColumnsWithDefault    = []string{"id", "sn", "part", "success"}
	downloadStatePrimaryKeyColumns     = []string{"id"}
)

type (
	// DownloadStateSlice is an alias for a slice of pointers to DownloadState.
	// This should generally be used opposed to []DownloadState.
	DownloadStateSlice []*DownloadState
	// DownloadStateHook is the signature for custom DownloadState hook methods
	DownloadStateHook func(context.Context, boil.ContextExecutor, *DownloadState) error

	downloadStateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	downloadStateType                 = reflect.TypeOf(&DownloadState{})
	downloadStateMapping              = queries.MakeStructMapping(downloadStateType)
	downloadStatePrimaryKeyMapping, _ = queries.BindMapping(downloadStateType, downloadStateMapping, downloadStatePrimaryKeyColumns)
	downloadStateInsertCacheMut       sync.RWMutex
	downloadStateInsertCache          = make(map[string]insertCache)
	downloadStateUpdateCacheMut       sync.RWMutex
	downloadStateUpdateCache          = make(map[string]updateCache)
	downloadStateUpsertCacheMut       sync.RWMutex
	downloadStateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var downloadStateBeforeInsertHooks []DownloadStateHook
var downloadStateBeforeUpdateHooks []DownloadStateHook
var downloadStateBeforeDeleteHooks []DownloadStateHook
var downloadStateBeforeUpsertHooks []DownloadStateHook

var downloadStateAfterInsertHooks []DownloadStateHook
var downloadStateAfterSelectHooks []DownloadStateHook
var downloadStateAfterUpdateHooks []DownloadStateHook
var downloadStateAfterDeleteHooks []DownloadStateHook
var downloadStateAfterUpsertHooks []DownloadStateHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DownloadState) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadStateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DownloadState) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadStateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DownloadState) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadStateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DownloadState) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadStateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DownloadState) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadStateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DownloadState) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadStateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DownloadState) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadStateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DownloadState) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadStateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DownloadState) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range downloadStateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDownloadStateHook registers your hook function for all future operations.
func AddDownloadStateHook(hookPoint boil.HookPoint, downloadStateHook DownloadStateHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		downloadStateBeforeInsertHooks = append(downloadStateBeforeInsertHooks, downloadStateHook)
	case boil.BeforeUpdateHook:
		downloadStateBeforeUpdateHooks = append(downloadStateBeforeUpdateHooks, downloadStateHook)
	case boil.BeforeDeleteHook:
		downloadStateBeforeDeleteHooks = append(downloadStateBeforeDeleteHooks, downloadStateHook)
	case boil.BeforeUpsertHook:
		downloadStateBeforeUpsertHooks = append(downloadStateBeforeUpsertHooks, downloadStateHook)
	case boil.AfterInsertHook:
		downloadStateAfterInsertHooks = append(downloadStateAfterInsertHooks, downloadStateHook)
	case boil.AfterSelectHook:
		downloadStateAfterSelectHooks = append(downloadStateAfterSelectHooks, downloadStateHook)
	case boil.AfterUpdateHook:
		downloadStateAfterUpdateHooks = append(downloadStateAfterUpdateHooks, downloadStateHook)
	case boil.AfterDeleteHook:
		downloadStateAfterDeleteHooks = append(downloadStateAfterDeleteHooks, downloadStateHook)
	case boil.AfterUpsertHook:
		downloadStateAfterUpsertHooks = append(downloadStateAfterUpsertHooks, downloadStateHook)
	}
}

// One returns a single downloadState record from the query.
func (q downloadStateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DownloadState, error) {
	o := &DownloadState{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for downloadState")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DownloadState records from the query.
func (q downloadStateQuery) All(ctx context.Context, exec boil.ContextExecutor) (DownloadStateSlice, error) {
	var o []*DownloadState

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DownloadState slice")
	}

	if len(downloadStateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DownloadState records in the query.
func (q downloadStateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count downloadState rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q downloadStateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if downloadState exists")
	}

	return count > 0, nil
}

// DownloadStates retrieves all the records using an executor.
func DownloadStates(mods ...qm.QueryMod) downloadStateQuery {
	mods = append(mods, qm.From("\"downloadState\""))
	return downloadStateQuery{NewQuery(mods...)}
}

// FindDownloadState retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDownloadState(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*DownloadState, error) {
	downloadStateObj := &DownloadState{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"downloadState\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, downloadStateObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from downloadState")
	}

	return downloadStateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DownloadState) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no downloadState provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(downloadStateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	downloadStateInsertCacheMut.RLock()
	cache, cached := downloadStateInsertCache[key]
	downloadStateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			downloadStateAllColumns,
			downloadStateColumnsWithDefault,
			downloadStateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(downloadStateType, downloadStateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(downloadStateType, downloadStateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"downloadState\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"downloadState\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"downloadState\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, downloadStatePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into downloadState")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for downloadState")
	}

CacheNoHooks:
	if !cached {
		downloadStateInsertCacheMut.Lock()
		downloadStateInsertCache[key] = cache
		downloadStateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DownloadState.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DownloadState) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	downloadStateUpdateCacheMut.RLock()
	cache, cached := downloadStateUpdateCache[key]
	downloadStateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			downloadStateAllColumns,
			downloadStatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update downloadState, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"downloadState\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, downloadStatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(downloadStateType, downloadStateMapping, append(wl, downloadStatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update downloadState row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for downloadState")
	}

	if !cached {
		downloadStateUpdateCacheMut.Lock()
		downloadStateUpdateCache[key] = cache
		downloadStateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q downloadStateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for downloadState")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for downloadState")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DownloadStateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), downloadStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"downloadState\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, downloadStatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in downloadState slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all downloadState")
	}
	return rowsAff, nil
}

// Delete deletes a single DownloadState record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DownloadState) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DownloadState provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), downloadStatePrimaryKeyMapping)
	sql := "DELETE FROM \"downloadState\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from downloadState")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for downloadState")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q downloadStateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no downloadStateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from downloadState")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for downloadState")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DownloadStateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(downloadStateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), downloadStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"downloadState\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, downloadStatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from downloadState slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for downloadState")
	}

	if len(downloadStateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DownloadState) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDownloadState(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DownloadStateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DownloadStateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), downloadStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"downloadState\".* FROM \"downloadState\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, downloadStatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DownloadStateSlice")
	}

	*o = slice

	return nil
}

// DownloadStateExists checks if the DownloadState row exists.
func DownloadStateExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"downloadState\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if downloadState exists")
	}

	return exists, nil
}
